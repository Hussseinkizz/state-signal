(function(n,r){typeof exports=="object"&&typeof module<"u"?r(exports):typeof define=="function"&&define.amd?define(["exports"],r):(n=typeof globalThis<"u"?globalThis:n||self,r(n["add-lib"]={}))})(this,function(n){"use strict";const r=[];let u=new Set,a=!1;function b(){for(const s of u)s();u.clear(),a=!1}function d(s,e={}){const{history:o=!0,maxHistory:f=10}=e;let l=s;const h=new Set,i=o?[s]:[];return{get value(){const t=r[r.length-1];return t&&h.add(t),l},set value(t){if(l!==t){l=t,o&&(i.push(t),i.length>f&&i.shift());for(const c of h)a?u.add(c):c();a||(a=!0,Promise.resolve().then(b))}},history(t=0){if(!o)return console.warn("History is deactivated for this signal."),null;if(t>=0)return i;const c=Math.abs(t);return c<=i.length?i.reverse()[c]:(console.error(`state signal error: Requested history index (${t}) exceeds current size (${i.length}). Consider using an index between -${i.length} and -1.`),null)}}}function g(s){const e=()=>{o(),r.push(e);try{s()}finally{r.pop()}},o=()=>{for(const f of e.trackedSignals||[])f.subscribers.delete(e);e.trackedSignals=[]};e.trackedSignals=[],e()}function v(s){const e=d(null);return g(()=>{e.value=s()}),{get value(){return e.value},set value(o){console.error("Error: Derived signals are computed values and cannot be manually updated.")}}}n.createSignal=d,n.derived=v,n.effect=g,Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=index.umd.js.map
